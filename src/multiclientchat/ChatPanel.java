/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package multiclientchat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

/**
 *
 * @author nhanlebka
 */
public class ChatPanel extends javax.swing.JPanel implements Runnable {

    private Socket socket;              // name of socket
    private String sender;              // name of sender
    private String receiver;            // name of receiver
    private BufferedReader input;
    private DataOutputStream output;
    
    /**
     * Creates new form ChatPanel
     */
    public ChatPanel(Socket s, String sender, String receiver) {
        initComponents();
        try {
            socket = s;

            // name of sender and receiver
            this.sender = sender;
            this.receiver = receiver;

            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new DataOutputStream(socket.getOutputStream());
        } catch (IOException i) {
            System.err.println("Error while creating Chat Frame");
        }
        btnSend.addActionListener(new ButtonSendClick());
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JSplitPane();
        inputPanel = new javax.swing.JSplitPane();
        btnSend = new javax.swing.JButton();
        txtInputPanel = new javax.swing.JScrollPane();
        txtInputArea = new javax.swing.JTextArea();
        receiveMessPanel = new javax.swing.JScrollPane();
        txtAreaReceiveMess = new javax.swing.JTextArea();

        mainPanel.setDividerLocation(300);
        mainPanel.setDividerSize(10);
        mainPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainPanel.setMaximumSize(new java.awt.Dimension(600, 450));
        mainPanel.setMinimumSize(new java.awt.Dimension(600, 450));
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 450));

        inputPanel.setDividerLocation(450);
        inputPanel.setDividerSize(10);
        inputPanel.setMaximumSize(new java.awt.Dimension(600, 140));
        inputPanel.setMinimumSize(new java.awt.Dimension(600, 140));
        inputPanel.setPreferredSize(new java.awt.Dimension(600, 140));

        btnSend.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        btnSend.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSend.setLabel("SEND");
        btnSend.setMaximumSize(new java.awt.Dimension(140, 140));
        btnSend.setMinimumSize(new java.awt.Dimension(140, 140));
        btnSend.setPreferredSize(new java.awt.Dimension(140, 140));
        inputPanel.setRightComponent(btnSend);

        txtInputPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        txtInputPanel.setMaximumSize(new java.awt.Dimension(449, 139));
        txtInputPanel.setMinimumSize(new java.awt.Dimension(449, 139));
        txtInputPanel.setPreferredSize(new java.awt.Dimension(449, 139));

        txtInputArea.setColumns(5);
        txtInputArea.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        txtInputArea.setRows(4);
        txtInputArea.setToolTipText("");
        txtInputArea.setWrapStyleWord(true);
        txtInputArea.setMaximumSize(new java.awt.Dimension(449, 139));
        txtInputArea.setMinimumSize(new java.awt.Dimension(449, 139));
        txtInputArea.setPreferredSize(new java.awt.Dimension(449, 139));
        txtInputPanel.setViewportView(txtInputArea);

        inputPanel.setLeftComponent(txtInputPanel);

        mainPanel.setRightComponent(inputPanel);

        receiveMessPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        receiveMessPanel.setMaximumSize(new java.awt.Dimension(600, 290));
        receiveMessPanel.setMinimumSize(new java.awt.Dimension(600, 290));
        receiveMessPanel.setPreferredSize(new java.awt.Dimension(600, 290));

        txtAreaReceiveMess.setEditable(false);
        txtAreaReceiveMess.setColumns(20);
        txtAreaReceiveMess.setRows(5);
        receiveMessPanel.setViewportView(txtAreaReceiveMess);

        mainPanel.setLeftComponent(receiveMessPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JSplitPane inputPanel;
    private javax.swing.JSplitPane mainPanel;
    private javax.swing.JScrollPane receiveMessPanel;
    private javax.swing.JTextArea txtAreaReceiveMess;
    private javax.swing.JTextArea txtInputArea;
    private javax.swing.JScrollPane txtInputPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run(){
        while(true){
            try{
                if(socket != null){
                    String msg = "";
                    while((msg = input.readLine()) != null){
                        txtAreaReceiveMess.append("\n" + receiver + ": " + msg);
                    }
                }
            } catch(Exception e){
                txtAreaReceiveMess.append("\nServer is closed!");
            }
        }
    }
    
    private class ButtonSendClick implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            String sendText = txtInputArea.getText();
            if(sendText.isEmpty())
                return;
            try{
                // send Text to server
                output.writeBytes(sender + ":" + sendText);
                
                // new line and remove cache
                output.write(13);
                output.write(10);
                output.flush();
                
                // Reset input text area
                txtInputArea.setText("");
            } catch(IOException i){
                System.err.println("Error while sending text");
            }
        }  
    }
}
